#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@author: li
'''
import copy
import sys


class maze(object):
    # highest probability of containing the target.
    def __init__(self):
        self.d = None
        self.m = [
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0,-1],
    [-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1],
    [-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1],
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]
        self.current = None

    def print_m(self):
        for row in self.current:
            for point in row:
                if point == -1:
                    print '\033[1;35m\033[0m'+"BBB",
                elif 0 <= point < 10:
                    print '\033[0m'+"  "+str(point),
                elif 10 <= point < 100:
                    print '\033[0m'+" "+str(point),
                else:
                    print str(point),
            print '\n',

    def init1(self):
        self.current = copy.deepcopy(self.m)
        for y in range(len(self.m)):
            for x in range(len(self.m)):
                if self.current[y][x] != -1:
                    self.current[y][x] = 1

    def one_step(self,d):
        # up 0, right 1, down 2, left 3
        dir = [(-1,0),(0,1),(1,0),(0,-1)]
        new_m = copy.deepcopy(self.m)
        for y in range(len(new_m)):
            for x in range(len(new_m)):
                if new_m[y][x] == -1:
                    continue
                elif new_m[y+dir[d][0]][x+dir[d][1]] == -1:
                    # print y,x,y+dir[d][0],x+dir[d][1]
                    new_m[y][x] += self.current[y][x]
                else:
                    new_m[y + dir[d][0]][x + dir[d][1]] += self.current[y][x]
        self.current = new_m

    def check_around(self, yi):
        dir = [(1, 0), (1, 1), (0, 1), (-1, 1),(-1,0),(-1,-1),(0,-1),(1,-1)]
        for y in range(len(self.m)):
            for x in range(len(self.m)):
                if self.current[y][x] != -1:
                    count = 0
                    for d in dir:
                        if self.current[y+d[0]][x+d[1]] == -1:
                            count += 1
                    if count != yi:
                        self.current[y][x] = 0


if __name__ == "__main__":
    print "script_name", sys.argv[0]
    for i in range(1, len(sys.argv)):
        print "argment", i, sys.argv[i]
    print ('start initialize')

    # -------------game------------------
    maze = maze()
    maze.init1()
    maze.print_m()
    data_in = []
    while(1):
        data = raw_input()
        if len(data)>1:
            for d in data:
                dint = int(d)
                data_in.append(dint)
                # print data
                maze.one_step(dint)
                maze.print_m()
            continue
        data = int(data)
        if data == 9:
            print data_in
            break
        data_in.append(data)
        # print data
        maze.one_step(data)
        maze.print_m()
    # -------------around-------------------
    # ys = [5,5,5]
    # actions = [1,1]
    # maze = maze()
    # maze.init1()
    # maze.check_around(ys[0])
    # maze.print_m()
    # for j in range(len(actions)):
    #     maze.one_step(actions[j])
    #     maze.check_around(ys[j+1])
    #     maze.print_m()
